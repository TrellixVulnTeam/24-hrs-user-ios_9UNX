{"version":3,"file":"ng-module-loader.js","sources":["ng-module-loader.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;wHAGE;AACF;AACA;AACA;AACA;AACA;AACA;;;yEAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { Compiler, Injectable } from '@angular/core';\n/**\n * NgModuleFactoryLoader that uses SystemJS to load NgModuleFactory\n */\nexport class NgModuleLoader {\n    /**\n     * @param {?} _compiler\n     */\n    constructor(_compiler) {\n        this._compiler = _compiler;\n    }\n    /**\n     * @param {?} modulePath\n     * @param {?} ngModuleExport\n     * @return {?}\n     */\n    load(modulePath, ngModuleExport) {\n        const /** @type {?} */ offlineMode = this._compiler instanceof Compiler;\n        return offlineMode ? loadPrecompiledFactory(modulePath, ngModuleExport) : loadAndCompile(this._compiler, modulePath, ngModuleExport);\n    }\n}\nNgModuleLoader.decorators = [\n    { type: Injectable },\n];\n/**\n * @nocollapse\n */\nNgModuleLoader.ctorParameters = () => [\n    { type: Compiler, },\n];\nfunction NgModuleLoader_tsickle_Closure_declarations() {\n    /** @type {?} */\n    NgModuleLoader.decorators;\n    /**\n     * @nocollapse\n     * @type {?}\n     */\n    NgModuleLoader.ctorParameters;\n    /** @type {?} */\n    NgModuleLoader.prototype._compiler;\n}\n/**\n * @param {?} compiler\n * @param {?} modulePath\n * @param {?} ngModuleExport\n * @return {?}\n */\nfunction loadAndCompile(compiler, modulePath, ngModuleExport) {\n    if (!ngModuleExport) {\n        ngModuleExport = 'default';\n    }\n    return System.import(modulePath)\n        .then((rawModule) => {\n        const /** @type {?} */ module = rawModule[ngModuleExport];\n        if (!module) {\n            throw new Error(`Module ${modulePath} does not export ${ngModuleExport}`);\n        }\n        return compiler.compileModuleAsync(module);\n    });\n}\n/**\n * @param {?} modulePath\n * @param {?} ngModuleExport\n * @return {?}\n */\nfunction loadPrecompiledFactory(modulePath, ngModuleExport) {\n    return System.import(modulePath)\n        .then((rawModule) => {\n        const /** @type {?} */ ngModuleFactory = rawModule[ngModuleExport];\n        if (!ngModuleFactory) {\n            throw new Error(`Module ${modulePath} does not export ${ngModuleExport}`);\n        }\n        return ngModuleFactory;\n    });\n}\n"]}