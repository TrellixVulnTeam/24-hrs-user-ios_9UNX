{"version":3,"file":"form.js","sources":["form.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;0FAGE;AACF;AACA;AACA;AACA;;;gDAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { Injectable } from '@angular/core';\nimport { removeArrayItem } from './util';\n/**\n * @hidden\n */\nexport class Form {\n    constructor() {\n        this._focused = null;\n        this._ids = -1;\n        this._inputs = [];\n    }\n    /**\n     * @param {?} input\n     * @return {?}\n     */\n    register(input) {\n        this._inputs.push(input);\n    }\n    /**\n     * @param {?} input\n     * @return {?}\n     */\n    deregister(input) {\n        removeArrayItem(this._inputs, input);\n        this.unsetAsFocused(input);\n    }\n    /**\n     * @param {?} input\n     * @return {?}\n     */\n    setAsFocused(input) {\n        this._focused = input;\n    }\n    /**\n     * @param {?} input\n     * @return {?}\n     */\n    unsetAsFocused(input) {\n        if (input === this._focused) {\n            this._focused = null;\n        }\n    }\n    /**\n     * Focuses the next input element, if it exists.\n     * @param {?} currentInput\n     * @return {?}\n     */\n    tabFocus(currentInput) {\n        const /** @type {?} */ inputs = this._inputs;\n        let /** @type {?} */ index = inputs.indexOf(currentInput) + 1;\n        if (index > 0 && index < inputs.length) {\n            var /** @type {?} */ nextInput = inputs[index];\n            if (nextInput !== this._focused) {\n                (void 0) /* console.debug */;\n                return nextInput.initFocus();\n            }\n        }\n        index = inputs.indexOf(this._focused);\n        if (index > 0) {\n            var /** @type {?} */ previousInput = inputs[index - 1];\n            if (previousInput) {\n                (void 0) /* console.debug */;\n                previousInput.initFocus();\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    nextId() {\n        return ++this._ids;\n    }\n}\nForm.decorators = [\n    { type: Injectable },\n];\n/**\n * @nocollapse\n */\nForm.ctorParameters = () => [];\nfunction Form_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Form.decorators;\n    /**\n     * @nocollapse\n     * @type {?}\n     */\n    Form.ctorParameters;\n    /** @type {?} */\n    Form.prototype._focused;\n    /** @type {?} */\n    Form.prototype._ids;\n    /** @type {?} */\n    Form.prototype._inputs;\n}\n/**\n * @hidden\n * @abstract\n */\nexport class IonicTapInput {\n    /**\n     * @abstract\n     * @return {?}\n     */\n    initFocus() { }\n    /**\n     * @abstract\n     * @return {?}\n     */\n    checked() { }\n    /**\n     * @abstract\n     * @param {?} val\n     * @return {?}\n     */\n    checked(val) { }\n    /**\n     * @abstract\n     * @return {?}\n     */\n    disabled() { }\n    /**\n     * @abstract\n     * @param {?} val\n     * @return {?}\n     */\n    disabled(val) { }\n}\n/**\n * @hidden\n * @abstract\n */\nexport class IonicFormInput {\n    /**\n     * @abstract\n     * @return {?}\n     */\n    initFocus() { }\n}\n"]}