{"version":3,"file":"gesture-controller.js","sources":["gesture-controller.js"],"names":[],"mappingsiIAGE;AACF;AACA;AACA;AACA;AACA;AACA;;;;;;kCAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { Inject, Injectable, forwardRef } from '@angular/core';\nimport { App } from '../components/app/app';\n/**\n * @hidden\n */\nexport const GESTURE_GO_BACK_SWIPE = 'goback-swipe';\n/**\n * @hidden\n */\nexport const GESTURE_MENU_SWIPE = 'menu-swipe';\n/**\n * @hidden\n */\nexport const GESTURE_ITEM_SWIPE = 'item-swipe';\n/**\n * @hidden\n */\nexport const GESTURE_REFRESHER = 'refresher';\n/**\n * @hidden\n */\nexport const GESTURE_TOGGLE = 'toggle';\n/**\n * @hidden\n */\nexport const GESTURE_PRIORITY_SLIDING_ITEM = -10;\n/**\n * @hidden\n */\nexport const GESTURE_PRIORITY_REFRESHER = 0;\n/**\n * @hidden\n */\nexport const GESTURE_PRIORITY_MENU_SWIPE = 10;\n/**\n * @hidden\n */\nexport const GESTURE_PRIORITY_GO_BACK_SWIPE = 20;\n/**\n * @hidden\n */\nexport const GESTURE_PRIORITY_TOGGLE = 30;\n/**\n * @hidden\n */\nexport const BLOCK_ALL = {\n    disable: [GESTURE_MENU_SWIPE, GESTURE_GO_BACK_SWIPE],\n    disableScroll: true\n};\n/**\n * @hidden\n */\nexport class GestureController {\n    /**\n     * @param {?} _app\n     */\n    constructor(_app) {\n        this._app = _app;\n        this.id = 1;\n        this.requestedStart = {};\n        this.disabledGestures = {};\n        this.disabledScroll = new Set();\n        this.capturedID = null;\n    }\n    /**\n     * @param {?} opts\n     * @return {?}\n     */\n    createGesture(opts) {\n        if (!opts.name) {\n            throw new Error('name is undefined');\n        }\n        return new GestureDelegate(opts.name, this.newID(), this, opts.priority || 0, !!opts.disableScroll);\n    }\n    /**\n     * @param {?=} opts\n     * @return {?}\n     */\n    createBlocker(opts = {}) {\n        return new BlockerDelegate(this.newID(), this, opts.disable, !!opts.disableScroll);\n    }\n    /**\n     * @return {?}\n     */\n    newID() {\n        let /** @type {?} */ id = this.id;\n        this.id++;\n        return id;\n    }\n    /**\n     * @param {?} gestureName\n     * @param {?} id\n     * @param {?} priority\n     * @return {?}\n     */\n    start(gestureName, id, priority) {\n        if (!this.canStart(gestureName)) {\n            delete this.requestedStart[id];\n            return false;\n        }\n        this.requestedStart[id] = priority;\n        return true;\n    }\n    /**\n     * @param {?} gestureName\n     * @param {?} id\n     * @param {?} priority\n     * @return {?}\n     */\n    capture(gestureName, id, priority) {\n        if (!this.start(gestureName, id, priority)) {\n            return false;\n        }\n        let /** @type {?} */ requestedStart = this.requestedStart;\n        let /** @type {?} */ maxPriority = -10000;\n        for (let /** @type {?} */ gestureID in requestedStart) {\n            maxPriority = Math.max(maxPriority, requestedStart[gestureID]);\n        }\n        if (maxPriority === priority) {\n            this.capturedID = id;\n            this.requestedStart = {};\n            (void 0) /* console.debug */;\n            return true;\n        }\n        delete requestedStart[id];\n        (void 0) /* console.debug */;\n        return false;\n    }\n    /**\n     * @param {?} id\n     * @return {?}\n     */\n    release(id) {\n        delete this.requestedStart[id];\n        if (this.capturedID && id === this.capturedID) {\n            this.capturedID = null;\n        }\n    }\n    /**\n     * @param {?} gestureName\n     * @param {?} id\n     * @return {?}\n     */\n    disableGesture(gestureName, id) {\n        let /** @type {?} */ set = this.disabledGestures[gestureName];\n        if (!set) {\n            set = new Set();\n            this.disabledGestures[gestureName] = set;\n        }\n        set.add(id);\n    }\n    /**\n     * @param {?} gestureName\n     * @param {?} id\n     * @return {?}\n     */\n    enableGesture(gestureName, id) {\n        let /** @type {?} */ set = this.disabledGestures[gestureName];\n        if (set) {\n            set.delete(id);\n        }\n    }\n    /**\n     * @param {?} id\n     * @return {?}\n     */\n    disableScroll(id) {\n        let /** @type {?} */ isEnabled = !this.isScrollDisabled();\n        this.disabledScroll.add(id);\n        if (this._app && isEnabled && this.isScrollDisabled()) {\n            (void 0) /* console.debug */;\n            this._app._setDisableScroll(true);\n        }\n    }\n    /**\n     * @param {?} id\n     * @return {?}\n     */\n    enableScroll(id) {\n        let /** @type {?} */ isDisabled = this.isScrollDisabled();\n        this.disabledScroll.delete(id);\n        if (this._app && isDisabled && !this.isScrollDisabled()) {\n            (void 0) /* console.debug */;\n            this._app._setDisableScroll(false);\n        }\n    }\n    /**\n     * @param {?} gestureName\n     * @return {?}\n     */\n    canStart(gestureName) {\n        if (this.capturedID) {\n            (void 0) /* console.debug */;\n            // a gesture already captured\n            return false;\n        }\n        if (this.isDisabled(gestureName)) {\n            (void 0) /* console.debug */;\n            return false;\n        }\n        return true;\n    }\n    /**\n     * @return {?}\n     */\n    isCaptured() {\n        return !!this.capturedID;\n    }\n    /**\n     * @return {?}\n     */\n    isScrollDisabled() {\n        return this.disabledScroll.size > 0;\n    }\n    /**\n     * @param {?} gestureName\n     * @return {?}\n     */\n    isDisabled(gestureName) {\n        let /** @type {?} */ disabled = this.disabledGestures[gestureName];\n        return !!(disabled && disabled.size > 0);\n    }\n}\nGestureController.decorators = [\n    { type: Injectable },\n];\n/**\n * @nocollapse\n */\nGestureController.ctorParameters = () => [\n    { type: App, decorators: [{ type: Inject, args: [forwardRef(() => App),] },] },\n];\nfunction GestureController_tsickle_Closure_declarations() {\n    /** @type {?} */\n    GestureController.decorators;\n    /**\n     * @nocollapse\n     * @type {?}\n     */\n    GestureController.ctorParameters;\n    /** @type {?} */\n    GestureController.prototype.id;\n    /** @type {?} */\n    GestureController.prototype.requestedStart;\n    /** @type {?} */\n    GestureController.prototype.disabledGestures;\n    /** @type {?} */\n    GestureController.prototype.disabledScroll;\n    /** @type {?} */\n    GestureController.prototype.capturedID;\n    /** @type {?} */\n    GestureController.prototype._app;\n}\n/**\n * @hidden\n */\nexport class GestureDelegate {\n    /**\n     * @param {?} name\n     * @param {?} id\n     * @param {?} controller\n     * @param {?} priority\n     * @param {?} disableScroll\n     */\n    constructor(name, id, controller, priority, disableScroll) {\n        this.name = name;\n        this.id = id;\n        this.controller = controller;\n        this.priority = priority;\n        this.disableScroll = disableScroll;\n    }\n    /**\n     * @return {?}\n     */\n    canStart() {\n        if (!this.controller) {\n            (void 0) /* assert */;\n            return false;\n        }\n        return this.controller.canStart(this.name);\n    }\n    /**\n     * @return {?}\n     */\n    start() {\n        if (!this.controller) {\n            (void 0) /* assert */;\n            return false;\n        }\n        return this.controller.start(this.name, this.id, this.priority);\n    }\n    /**\n     * @return {?}\n     */\n    capture() {\n        if (!this.controller) {\n            (void 0) /* assert */;\n            return false;\n        }\n        let /** @type {?} */ captured = this.controller.capture(this.name, this.id, this.priority);\n        if (captured && this.disableScroll) {\n            this.controller.disableScroll(this.id);\n        }\n        return captured;\n    }\n    /**\n     * @return {?}\n     */\n    release() {\n        if (!this.controller) {\n            (void 0) /* assert */;\n            return;\n        }\n        this.controller.release(this.id);\n        if (this.disableScroll) {\n            this.controller.enableScroll(this.id);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    destroy() {\n        this.release();\n        this.controller = null;\n    }\n}\nfunction GestureDelegate_tsickle_Closure_declarations() {\n    /** @type {?} */\n    GestureDelegate.prototype.name;\n    /** @type {?} */\n    GestureDelegate.prototype.id;\n    /** @type {?} */\n    GestureDelegate.prototype.controller;\n    /** @type {?} */\n    GestureDelegate.prototype.priority;\n    /** @type {?} */\n    GestureDelegate.prototype.disableScroll;\n}\n/**\n * @hidden\n */\nexport class BlockerDelegate {\n    /**\n     * @param {?} id\n     * @param {?} controller\n     * @param {?} disable\n     * @param {?} disableScroll\n     */\n    constructor(id, controller, disable, disableScroll) {\n        this.id = id;\n        this.controller = controller;\n        this.disable = disable;\n        this.disableScroll = disableScroll;\n        this.blocked = false;\n    }\n    /**\n     * @return {?}\n     */\n    block() {\n        if (!this.controller) {\n            (void 0) /* assert */;\n            return;\n        }\n        if (this.disable) {\n            this.disable.forEach(gesture => {\n                this.controller.disableGesture(gesture, this.id);\n            });\n        }\n        if (this.disableScroll) {\n            this.controller.disableScroll(this.id);\n        }\n        this.blocked = true;\n    }\n    /**\n     * @return {?}\n     */\n    unblock() {\n        if (!this.controller) {\n            (void 0) /* assert */;\n            return;\n        }\n        if (this.disable) {\n            this.disable.forEach(gesture => {\n                this.controller.enableGesture(gesture, this.id);\n            });\n        }\n        if (this.disableScroll) {\n            this.controller.enableScroll(this.id);\n        }\n        this.blocked = false;\n    }\n    /**\n     * @return {?}\n     */\n    destroy() {\n        this.unblock();\n        this.controller = null;\n    }\n}\nfunction BlockerDelegate_tsickle_Closure_declarations() {\n    /** @type {?} */\n    BlockerDelegate.prototype.blocked;\n    /** @type {?} */\n    BlockerDelegate.prototype.id;\n    /** @type {?} */\n    BlockerDelegate.prototype.controller;\n    /** @type {?} */\n    BlockerDelegate.prototype.disable;\n    /** @type {?} */\n    BlockerDelegate.prototype.disableScroll;\n}\n"]}