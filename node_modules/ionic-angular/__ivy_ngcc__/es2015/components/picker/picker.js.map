{"version":3,"file":"picker.js","sources":["picker.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;2JAAC;AACD;AACA;AACA;AAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { EventEmitter, Output } from '@angular/core';\nimport { isPresent } from '../../util/util';\nimport { PickerCmp } from './picker-component';\nimport { PickerSlideIn, PickerSlideOut } from './picker-transitions';\nimport { ViewController } from '../../navigation/view-controller';\n/**\n * @hidden\n */\nexport class Picker extends ViewController {\n    /**\n     * @param {?} app\n     * @param {?=} opts\n     * @param {?=} config\n     */\n    constructor(app, opts = {}, config) {\n        if (!opts) {\n            opts = {};\n        }\n        opts.columns = opts.columns || [];\n        opts.buttons = opts.buttons || [];\n        opts.enableBackdropDismiss = isPresent(opts.enableBackdropDismiss) ? Boolean(opts.enableBackdropDismiss) : true;\n        super(PickerCmp, opts, null);\n        this._app = app;\n        this.isOverlay = true;\n        this.ionChange = new EventEmitter();\n        config.setTransition('picker-slide-in', PickerSlideIn);\n        config.setTransition('picker-slide-out', PickerSlideOut);\n    }\n    /**\n     * @hidden\n     * @param {?} direction\n     * @return {?}\n     */\n    getTransitionName(direction) {\n        let /** @type {?} */ key = (direction === 'back' ? 'pickerLeave' : 'pickerEnter');\n        return this._nav && this._nav.config.get(key);\n    }\n    /**\n     * @param {?} button\n     * @return {?}\n     */\n    addButton(button) {\n        this.data.buttons.push(button);\n    }\n    /**\n     * @param {?} column\n     * @return {?}\n     */\n    addColumn(column) {\n        this.data.columns.push(column);\n    }\n    /**\n     * @return {?}\n     */\n    getColumns() {\n        return this.data.columns;\n    }\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    getColumn(name) {\n        return this.getColumns().find(column => column.name === name);\n    }\n    /**\n     * @return {?}\n     */\n    refresh() {\n        (void 0) /* assert */;\n        (void 0) /* assert */;\n        this._cmp && this._cmp.instance.refresh && this._cmp.instance.refresh();\n    }\n    /**\n     * @param {?} cssClass\n     * @return {?}\n     */\n    setCssClass(cssClass) {\n        this.data.cssClass = cssClass;\n    }\n    /**\n     * Present the picker instance.\n     *\n     * @param {?=} navOptions\n     * @return {?}\n     */\n    present(navOptions = {}) {\n        return this._app.present(this, navOptions);\n    }\n}\nPicker.propDecorators = {\n    'ionChange': [{ type: Output },],\n};\nfunction Picker_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Picker.propDecorators;\n    /** @type {?} */\n    Picker.prototype._app;\n    /** @type {?} */\n    Picker.prototype.ionChange;\n}\n"]}