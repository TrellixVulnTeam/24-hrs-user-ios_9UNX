{"version":3,"file":"picker-component.js","sources":["picker-component.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;mIA0BE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { Component, ElementRef, HostListener, Renderer, ViewChildren, ViewEncapsulation } from '@angular/core';\nimport { isNumber, isPresent, isString } from '../../util/util';\nimport { Config } from '../../config/config';\nimport { BLOCK_ALL, GestureController, } from '../../gestures/gesture-controller';\nimport { KEY_ENTER, KEY_ESCAPE } from '../../platform/key';\nimport { NavParams } from '../../navigation/nav-params';\nimport { ViewController } from '../../navigation/view-controller';\nimport { PickerColumnCmp } from './picker-column';\n/**\n * @hidden\n */\nexport class PickerCmp {\n    /**\n     * @param {?} _viewCtrl\n     * @param {?} _elementRef\n     * @param {?} config\n     * @param {?} gestureCtrl\n     * @param {?} params\n     * @param {?} renderer\n     */\n    constructor(_viewCtrl, _elementRef, config, gestureCtrl, params, renderer) {\n        this._viewCtrl = _viewCtrl;\n        this._elementRef = _elementRef;\n        this._gestureBlocker = gestureCtrl.createBlocker(BLOCK_ALL);\n        this.d = params.data;\n        this.mode = config.get('mode');\n        renderer.setElementClass(_elementRef.nativeElement, `picker-${this.mode}`, true);\n        if (this.d.cssClass) {\n            this.d.cssClass.split(' ').forEach(cssClass => {\n                renderer.setElementClass(_elementRef.nativeElement, cssClass, true);\n            });\n        }\n        this.id = (++pickerIds);\n        this.lastClick = 0;\n    }\n    /**\n     * @return {?}\n     */\n    ionViewWillLoad() {\n        // normalize the data\n        let /** @type {?} */ data = this.d;\n        data.buttons = data.buttons.map(button => {\n            if (isString(button)) {\n                return { text: button };\n            }\n            if (button.role) {\n                button.cssRole = `picker-toolbar-${button.role}`;\n            }\n            return button;\n        });\n        // clean up dat data\n        data.columns = data.columns.map(column => {\n            if (!isPresent(column.options)) {\n                column.options = [];\n            }\n            column.selectedIndex = column.selectedIndex || 0;\n            column.options = column.options.map(inputOpt => {\n                let /** @type {?} */ opt = {\n                    text: '',\n                    value: '',\n                    disabled: inputOpt.disabled,\n                };\n                if (isPresent(inputOpt)) {\n                    if (isString(inputOpt) || isNumber(inputOpt)) {\n                        opt.text = inputOpt.toString();\n                        opt.value = inputOpt;\n                    }\n                    else {\n                        opt.text = isPresent(inputOpt.text) ? inputOpt.text : inputOpt.value;\n                        opt.value = isPresent(inputOpt.value) ? inputOpt.value : inputOpt.text;\n                    }\n                }\n                return opt;\n            });\n            return column;\n        });\n    }\n    /**\n     * @return {?}\n     */\n    ionViewDidLoad() {\n        this.refresh();\n    }\n    /**\n     * @return {?}\n     */\n    ionViewWillEnter() {\n        this._gestureBlocker.block();\n    }\n    /**\n     * @return {?}\n     */\n    ionViewDidLeave() {\n        this._gestureBlocker.unblock();\n    }\n    /**\n     * @return {?}\n     */\n    refresh() {\n        this._cols.forEach(column => column.refresh());\n    }\n    /**\n     * @return {?}\n     */\n    _colChange() {\n        // one of the columns has changed its selected index\n        var /** @type {?} */ picker = (this._viewCtrl);\n        picker.ionChange.emit(this.getSelected());\n    }\n    /**\n     * @param {?} ev\n     * @return {?}\n     */\n    _keyUp(ev) {\n        if (this.enabled && this._viewCtrl.isLast()) {\n            if (ev.keyCode === KEY_ENTER) {\n                if (this.lastClick + 1000 < Date.now()) {\n                    // do not fire this click if there recently was already a click\n                    // this can happen when the button has focus and used the enter\n                    // key to click the button. However, both the click handler and\n                    // this keyup event will fire, so only allow one of them to go.\n                    (void 0) /* console.debug */;\n                    let /** @type {?} */ button = this.d.buttons[this.d.buttons.length - 1];\n                    this.btnClick(button);\n                }\n            }\n            else if (ev.keyCode === KEY_ESCAPE) {\n                (void 0) /* console.debug */;\n                this.bdClick();\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ionViewDidEnter() {\n        let /** @type {?} */ focusableEle = this._elementRef.nativeElement.querySelector('button');\n        if (focusableEle) {\n            focusableEle.focus();\n        }\n        this.enabled = true;\n    }\n    /**\n     * @param {?} button\n     * @return {?}\n     */\n    btnClick(button) {\n        if (!this.enabled) {\n            return;\n        }\n        // keep the time of the most recent button click\n        this.lastClick = Date.now();\n        let /** @type {?} */ shouldDismiss = true;\n        if (button.handler) {\n            // a handler has been provided, execute it\n            // pass the handler the values from the inputs\n            if (button.handler(this.getSelected()) === false) {\n                // if the return value of the handler is false then do not dismiss\n                shouldDismiss = false;\n            }\n        }\n        if (shouldDismiss) {\n            this.dismiss(button.role);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    bdClick() {\n        if (this.enabled && this.d.enableBackdropDismiss) {\n            let /** @type {?} */ cancelBtn = this.d.buttons.find(b => b.role === 'cancel');\n            if (cancelBtn) {\n                this.btnClick(cancelBtn);\n            }\n            else {\n                this.dismiss('backdrop');\n            }\n        }\n    }\n    /**\n     * @param {?} role\n     * @return {?}\n     */\n    dismiss(role) {\n        return this._viewCtrl.dismiss(this.getSelected(), role);\n    }\n    /**\n     * @return {?}\n     */\n    getSelected() {\n        let /** @type {?} */ selected = {};\n        this.d.columns.forEach((col, index) => {\n            let /** @type {?} */ selectedColumn = col.options[col.selectedIndex];\n            selected[col.name] = {\n                text: selectedColumn ? selectedColumn.text : null,\n                value: selectedColumn ? selectedColumn.value : null,\n                columnIndex: index,\n            };\n        });\n        return selected;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        (void 0) /* assert */;\n        this._gestureBlocker.destroy();\n    }\n}\nPickerCmp.decorators = [\n    { type: Component, args: [{\n                selector: 'ion-picker-cmp',\n                template: `\n    <ion-backdrop (click)=\"bdClick()\"></ion-backdrop>\n    <div class=\"picker-wrapper\">\n      <div class=\"picker-toolbar\">\n        <div *ngFor=\"let b of d.buttons\" class=\"picker-toolbar-button\" [ngClass]=\"b.cssRole\">\n          <button ion-button (click)=\"btnClick(b)\" [ngClass]=\"b.cssClass\" class=\"picker-button\" clear>\n            {{b.text}}\n          </button>\n        </div>\n      </div>\n      <div class=\"picker-columns\">\n        <div class=\"picker-above-highlight\"></div>\n        <div *ngFor=\"let c of d.columns\" [col]=\"c\" class=\"picker-col\" (ionChange)=\"_colChange($event)\"></div>\n        <div class=\"picker-below-highlight\"></div>\n      </div>\n    </div>\n  `,\n                host: {\n                    'role': 'dialog'\n                },\n                encapsulation: ViewEncapsulation.None,\n            },] },\n];\n/**\n * @nocollapse\n */\nPickerCmp.ctorParameters = () => [\n    { type: ViewController, },\n    { type: ElementRef, },\n    { type: Config, },\n    { type: GestureController, },\n    { type: NavParams, },\n    { type: Renderer, },\n];\nPickerCmp.propDecorators = {\n    '_cols': [{ type: ViewChildren, args: [PickerColumnCmp,] },],\n    '_keyUp': [{ type: HostListener, args: ['body:keyup', ['$event'],] },],\n};\nfunction PickerCmp_tsickle_Closure_declarations() {\n    /** @type {?} */\n    PickerCmp.decorators;\n    /**\n     * @nocollapse\n     * @type {?}\n     */\n    PickerCmp.ctorParameters;\n    /** @type {?} */\n    PickerCmp.propDecorators;\n    /** @type {?} */\n    PickerCmp.prototype._cols;\n    /** @type {?} */\n    PickerCmp.prototype.d;\n    /** @type {?} */\n    PickerCmp.prototype.enabled;\n    /** @type {?} */\n    PickerCmp.prototype.lastClick;\n    /** @type {?} */\n    PickerCmp.prototype.id;\n    /** @type {?} */\n    PickerCmp.prototype.mode;\n    /** @type {?} */\n    PickerCmp.prototype._gestureBlocker;\n    /** @type {?} */\n    PickerCmp.prototype._viewCtrl;\n    /** @type {?} */\n    PickerCmp.prototype._elementRef;\n}\nlet /** @type {?} */ pickerIds = -1;\n"]}