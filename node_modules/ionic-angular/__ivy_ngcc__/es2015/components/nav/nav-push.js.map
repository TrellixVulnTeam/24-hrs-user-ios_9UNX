{"version":3,"file":"nav-push.js","sources":["nav-push.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;mEAKE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;oBAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { Directive, HostListener, Input, Optional } from '@angular/core';\nimport { NavController } from '../../navigation/nav-controller';\n/**\n * \\@name NavPush\n * \\@description\n * Directive to declaratively push a new page to the current nav\n * stack.\n *\n * \\@usage\n * ```html\n * <button ion-button [navPush]=\"pushPage\"></button>\n * ```\n *\n * To specify parameters you can use array syntax or the `navParams`\n * property:\n *\n * ```html\n * <button ion-button [navPush]=\"pushPage\" [navParams]=\"params\">Go</button>\n * ```\n *\n * Where `pushPage` and `params` are specified in your component,\n * and `pushPage` contains a reference to a\n * component you would like to push:\n *\n * ```ts\n * import { LoginPage } from './login';\n *\n * \\@Component({\n *   template: `<button ion-button [navPush]=\"pushPage\" [navParams]=\"params\">Go</button>`\n * })\n * class MyPage {\n *   params: Object;\n *   pushPage: any;\n *   constructor(){\n *     this.pushPage = LoginPage;\n *     this.params = { id: 42 };\n *   }\n * }\n * ```\n *\n * \\@demo /docs/demos/src/navigation/\n * @see {\\@link /docs/components#navigation Navigation Component Docs}\n * @see {\\@link ../NavPop NavPop API Docs}\n *\n */\nexport class NavPush {\n    /**\n     * @param {?} _nav\n     */\n    constructor(_nav) {\n        this._nav = _nav;\n        if (!_nav) {\n            console.error('navPush must be within a NavController');\n        }\n    }\n    /**\n     * @hidden\n     * @return {?}\n     */\n    onClick() {\n        if (this._nav && this.navPush) {\n            this._nav.push(this.navPush, this.navParams);\n            return false;\n        }\n        return true;\n    }\n}\nNavPush.decorators = [\n    { type: Directive, args: [{\n                selector: '[navPush]'\n            },] },\n];\n/**\n * @nocollapse\n */\nNavPush.ctorParameters = () => [\n    { type: NavController, decorators: [{ type: Optional },] },\n];\nNavPush.propDecorators = {\n    'navPush': [{ type: Input },],\n    'navParams': [{ type: Input },],\n    'onClick': [{ type: HostListener, args: ['click',] },],\n};\nfunction NavPush_tsickle_Closure_declarations() {\n    /** @type {?} */\n    NavPush.decorators;\n    /**\n     * @nocollapse\n     * @type {?}\n     */\n    NavPush.ctorParameters;\n    /** @type {?} */\n    NavPush.propDecorators;\n    /**\n     * \\@input {Page | string} The component class or deeplink name you want to push onto the navigation stack.\n     * @type {?}\n     */\n    NavPush.prototype.navPush;\n    /**\n     * \\@input {any} Any NavParams you want to pass along to the next view.\n     * @type {?}\n     */\n    NavPush.prototype.navParams;\n    /** @type {?} */\n    NavPush.prototype._nav;\n}\n"]}