{"version":3,"file":"nav.js","sources":["nav.js"],"names":[],"mappingsoBAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { Component, ComponentFactoryResolver, ElementRef, ErrorHandler, Input, NgZone, Optional, Renderer, ViewChild, ViewContainerRef, ViewEncapsulation, forwardRef } from '@angular/core';\nimport { App } from '../app/app';\nimport { Config } from '../../config/config';\nimport { DeepLinker } from '../../navigation/deep-linker';\nimport { DomController } from '../../platform/dom-controller';\nimport { GestureController } from '../../gestures/gesture-controller';\nimport { NavController } from '../../navigation/nav-controller';\nimport { NavControllerBase } from '../../navigation/nav-controller-base';\nimport { Platform } from '../../platform/platform';\nimport { TransitionController } from '../../transitions/transition-controller';\nimport { ViewController } from '../../navigation/view-controller';\nimport { RootNode } from '../split-pane/split-pane';\n/**\n * \\@name Nav\n * \\@description\n *\n * `ion-nav` is the declarative component for a [NavController](../../../navigation/NavController/).\n *\n * For more information on using nav controllers like Nav or [Tab](../../Tabs/Tab/),\n * take a look at the [NavController API Docs](../../../navigation/NavController/).\n *\n *\n * \\@usage\n * You must set a root page to be loaded initially by any Nav you create, using\n * the 'root' property:\n *\n * ```ts\n * import { Component } from '\\@angular/core';\n * import { GettingStartedPage } from './getting-started';\n *\n * \\@Component({\n *   template: `<ion-nav [root]=\"root\"></ion-nav>`\n * })\n * class MyApp {\n *   root = GettingStartedPage;\n *\n *   constructor(){\n *   }\n * }\n * ```\n *\n * \\@demo /docs/demos/src/navigation/\n * @see {\\@link /docs/components#navigation Navigation Component Docs}\n */\nexport class Nav extends NavControllerBase {\n    /**\n     * @param {?} viewCtrl\n     * @param {?} parent\n     * @param {?} app\n     * @param {?} config\n     * @param {?} plt\n     * @param {?} elementRef\n     * @param {?} zone\n     * @param {?} renderer\n     * @param {?} cfr\n     * @param {?} gestureCtrl\n     * @param {?} transCtrl\n     * @param {?} linker\n     * @param {?} domCtrl\n     * @param {?} errHandler\n     */\n    constructor(viewCtrl, parent, app, config, plt, elementRef, zone, renderer, cfr, gestureCtrl, transCtrl, linker, domCtrl, errHandler) {\n        super(parent, app, config, plt, elementRef, zone, renderer, cfr, gestureCtrl, transCtrl, linker, domCtrl, errHandler);\n        this._hasInit = false;\n        if (viewCtrl) {\n            // an ion-nav can also act as an ion-page within a parent ion-nav\n            // this would happen when an ion-nav nests a child ion-nav.\n            viewCtrl._setContent(this);\n        }\n        if (parent) {\n            // this Nav has a parent Nav\n            parent.registerChildNav(this);\n        }\n        else if (viewCtrl && viewCtrl.getNav()) {\n            // this Nav was opened from a modal\n            this.parent = viewCtrl.getNav();\n            this.parent.registerChildNav(this);\n        }\n        else if (app && !app.getRootNavById(this.id)) {\n            // a root nav has not been registered yet with the app\n            // this is the root navcontroller for the entire app\n            app.registerRootNav(this);\n        }\n    }\n    /**\n     * @hidden\n     * @param {?} val\n     * @return {?}\n     */\n    set _vp(val) {\n        this.setViewport(val);\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewInit() {\n        this._hasInit = true;\n        const /** @type {?} */ segment = this._linker.getSegmentByNavIdOrName(this.id, this.name);\n        if (segment && (segment.component || segment.loadChildren)) {\n            return this._linker.initViews(segment).then(views => {\n                return this.setPages(views, null, null);\n            });\n        }\n        else if (this._root) {\n            // no segment match, so use the root property but don't set the url I guess\n            const /** @type {?} */ setUrl = segment ? false : true;\n            return this.push(this._root, this.rootParams, {\n                isNavRoot: ((this._app.getRootNavById(this.id)) === this),\n                updateUrl: setUrl\n            }, null);\n        }\n    }\n    /**\n     * \\@input {Page} The Page component to load as the root page within this nav.\n     * @return {?}\n     */\n    get root() {\n        return this._root;\n    }\n    /**\n     * @param {?} page\n     * @return {?}\n     */\n    set root(page) {\n        this._root = page;\n        if (this._hasInit) {\n            this.setRoot(page);\n        }\n    }\n    /**\n     * @hidden\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.destroy();\n    }\n    /**\n     * @return {?}\n     */\n    initPane() {\n        const /** @type {?} */ isMain = this._elementRef.nativeElement.hasAttribute('main');\n        return isMain;\n    }\n    /**\n     * @param {?} isPane\n     * @return {?}\n     */\n    paneChanged(isPane) {\n        if (isPane) {\n            this.resize();\n        }\n    }\n    /**\n     * @param {?} opts\n     * @return {?}\n     */\n    goToRoot(opts) {\n        return this.setRoot(this._root, this.rootParams, opts, null);\n    }\n    /**\n     * @return {?}\n     */\n    getType() {\n        return 'nav';\n    }\n    /**\n     * @return {?}\n     */\n    getSecondaryIdentifier() {\n        return null;\n    }\n}\nNav.decorators = [\n    { type: Component, args: [{\n                selector: 'ion-nav',\n                template: '<div #viewport nav-viewport></div>' +\n                    '<div class=\"nav-decor\"></div>',\n                encapsulation: ViewEncapsulation.None,\n                providers: [{ provide: RootNode, useExisting: forwardRef(() => Nav) }]\n            },] },\n];\n/**\n * @nocollapse\n */\nNav.ctorParameters = () => [\n    { type: ViewController, decorators: [{ type: Optional },] },\n    { type: NavController, decorators: [{ type: Optional },] },\n    { type: App, },\n    { type: Config, },\n    { type: Platform, },\n    { type: ElementRef, },\n    { type: NgZone, },\n    { type: Renderer, },\n    { type: ComponentFactoryResolver, },\n    { type: GestureController, },\n    { type: TransitionController, },\n    { type: DeepLinker, decorators: [{ type: Optional },] },\n    { type: DomController, },\n    { type: ErrorHandler, },\n];\nNav.propDecorators = {\n    '_vp': [{ type: ViewChild, args: ['viewport', { read: ViewContainerRef },] },],\n    'root': [{ type: Input },],\n    'rootParams': [{ type: Input },],\n    'name': [{ type: Input },],\n};\nfunction Nav_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Nav.decorators;\n    /**\n     * @nocollapse\n     * @type {?}\n     */\n    Nav.ctorParameters;\n    /** @type {?} */\n    Nav.propDecorators;\n    /** @type {?} */\n    Nav.prototype._root;\n    /** @type {?} */\n    Nav.prototype._hasInit;\n    /**\n     * \\@input {object} Any nav-params to pass to the root page of this nav.\n     * @type {?}\n     */\n    Nav.prototype.rootParams;\n    /**\n     * \\@input {string} a unique name for the nav element\n     * @type {?}\n     */\n    Nav.prototype.name;\n}\n"]}