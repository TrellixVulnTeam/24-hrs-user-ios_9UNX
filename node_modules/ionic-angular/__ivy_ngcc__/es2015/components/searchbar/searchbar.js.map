{"version":3,"file":"searchbar.js","sources":["searchbar.js"],"names":[],"mappingsuEA4BE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { Component, ElementRef, EventEmitter, Input, Optional, Output, Renderer, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { NgControl } from '@angular/forms';\nimport { Config } from '../../config/config';\nimport { BaseInput } from '../../util/base-input';\nimport { isPresent, isTrueProperty } from '../../util/util';\nimport { TimeoutDebouncer } from '../../util/debouncer';\nimport { Platform } from '../../platform/platform';\n/**\n * \\@name Searchbar\n * \\@module ionic\n * \\@description\n * Manages the display of a Searchbar which can be used to search or filter items.\n *\n * \\@usage\n * ```html\n * <ion-searchbar\n *   [(ngModel)]=\"myInput\"\n *   [showCancelButton]=\"shouldShowCancel\"\n *   (ionInput)=\"onInput($event)\"\n *   (ionCancel)=\"onCancel($event)\">\n * </ion-searchbar>\n * ```\n *\n * \\@demo /docs/demos/src/searchbar/\n * @see {\\@link /docs/components#searchbar Searchbar Component Docs}\n */\nexport class Searchbar extends BaseInput {\n    /**\n     * @param {?} config\n     * @param {?} _plt\n     * @param {?} elementRef\n     * @param {?} renderer\n     * @param {?} ngControl\n     */\n    constructor(config, _plt, elementRef, renderer, ngControl) {\n        super(config, elementRef, renderer, 'searchbar', '', null, null, ngControl);\n        this._plt = _plt;\n        this._shouldBlur = true;\n        this._shouldAlignLeft = true;\n        this._isCancelVisible = false;\n        this._spellcheck = false;\n        this._autocomplete = 'off';\n        this._autocorrect = 'off';\n        this._isActive = false;\n        this._showCancelButton = false;\n        this._animated = false;\n        this._inputDebouncer = new TimeoutDebouncer(0);\n        /**\n         * \\@input {string} Set the the cancel button text. Default: `\"Cancel\"`.\n         */\n        this.cancelButtonText = 'Cancel';\n        /**\n         * \\@input {string} Set the input's placeholder. Default `\"Search\"`.\n         */\n        this.placeholder = 'Search';\n        /**\n         * \\@input {string} Set the type of the input. Values: `\"text\"`, `\"password\"`, `\"email\"`, `\"number\"`, `\"search\"`, `\"tel\"`, `\"url\"`. Default `\"search\"`.\n         */\n        this.type = 'search';\n        /**\n         * \\@output {event} Emitted when the Searchbar input has changed, including when it's cleared.\n         */\n        this.ionInput = new EventEmitter();\n        /**\n         * \\@output {event} Emitted when the cancel button is clicked.\n         */\n        this.ionCancel = new EventEmitter();\n        /**\n         * \\@output {event} Emitted when the clear input button is clicked.\n         */\n        this.ionClear = new EventEmitter();\n        this.debounce = 250;\n    }\n    /**\n     * \\@input {boolean} If true, show the cancel button. Default `false`.\n     * @return {?}\n     */\n    get showCancelButton() {\n        return this._showCancelButton;\n    }\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    set showCancelButton(val) {\n        this._showCancelButton = isTrueProperty(val);\n    }\n    /**\n     * \\@input {number} How long, in milliseconds, to wait to trigger the `ionInput` event after each keystroke. Default `250`.\n     * @return {?}\n     */\n    get debounce() {\n        return this._debouncer.wait;\n    }\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    set debounce(val) {\n        this._debouncer.wait = val;\n        this._inputDebouncer.wait = val;\n    }\n    /**\n     * \\@input {string} Set the input's autocomplete property. Values: `\"on\"`, `\"off\"`. Default `\"off\"`.\n     * @param {?} val\n     * @return {?}\n     */\n    set autocomplete(val) {\n        this._autocomplete = (val === '' || val === 'on') ? 'on' : this._config.get('autocomplete', 'off');\n    }\n    /**\n     * \\@input {string} Set the input's autocorrect property. Values: `\"on\"`, `\"off\"`. Default `\"off\"`.\n     * @param {?} val\n     * @return {?}\n     */\n    set autocorrect(val) {\n        this._autocorrect = (val === '' || val === 'on') ? 'on' : this._config.get('autocorrect', 'off');\n    }\n    /**\n     * \\@input {string|boolean} Set the input's spellcheck property. Values: `true`, `false`. Default `false`.\n     * @param {?} val\n     * @return {?}\n     */\n    set spellcheck(val) {\n        this._spellcheck = (val === '' || val === 'true' || val === true) ? true : this._config.getBoolean('spellcheck', false);\n    }\n    /**\n     * \\@input {boolean} If true, enable searchbar animation. Default `false`.\n     * @return {?}\n     */\n    get animated() {\n        return this._animated;\n    }\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    set animated(val) {\n        this._animated = isTrueProperty(val);\n    }\n    /**\n     * @hidden\n     * On Initialization check for attributes\n     * @return {?}\n     */\n    ngOnInit() {\n        const /** @type {?} */ showCancelButton = this.showCancelButton;\n        if (typeof showCancelButton === 'string') {\n            this.showCancelButton = (showCancelButton === '' || showCancelButton === 'true');\n        }\n    }\n    /**\n     * @hidden\n     * @return {?}\n     */\n    _inputUpdated() {\n        const /** @type {?} */ ele = this._searchbarInput.nativeElement;\n        const /** @type {?} */ value = this._value;\n        // It is important not to re-assign the value if it is the same, because,\n        // otherwise, the caret is moved to the end of the input\n        if (ele.value !== value) {\n            ele.value = value;\n        }\n        this.positionElements();\n    }\n    /**\n     * @hidden\n     * Positions the input search icon, placeholder, and the cancel button\n     * based on the input value and if it is focused. (ios only)\n     * @return {?}\n     */\n    positionElements() {\n        const /** @type {?} */ isAnimated = this._animated;\n        const /** @type {?} */ prevAlignLeft = this._shouldAlignLeft;\n        const /** @type {?} */ shouldAlignLeft = (!isAnimated || (this._value && this._value.toString().trim() !== '') || this._isFocus === true);\n        this._shouldAlignLeft = shouldAlignLeft;\n        if (this._mode !== 'ios') {\n            return;\n        }\n        if (prevAlignLeft !== shouldAlignLeft) {\n            this.positionPlaceholder();\n        }\n        if (isAnimated) {\n            this.positionCancelButton();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    positionPlaceholder() {\n        const /** @type {?} */ inputEle = this._searchbarInput.nativeElement;\n        const /** @type {?} */ iconEle = this._searchbarIcon.nativeElement;\n        if (this._shouldAlignLeft) {\n            inputEle.removeAttribute('style');\n            iconEle.removeAttribute('style');\n        }\n        else {\n            // Create a dummy span to get the placeholder width\n            var /** @type {?} */ doc = this._plt.doc();\n            var /** @type {?} */ tempSpan = doc.createElement('span');\n            tempSpan.innerHTML = this.placeholder;\n            doc.body.appendChild(tempSpan);\n            // Get the width of the span then remove it\n            var /** @type {?} */ textWidth = tempSpan.offsetWidth;\n            doc.body.removeChild(tempSpan);\n            // Set the input padding start\n            var /** @type {?} */ inputLeft = 'calc(50% - ' + (textWidth / 2) + 'px)';\n            if (this._plt.isRTL) {\n                inputEle.style.paddingRight = inputLeft;\n            }\n            else {\n                inputEle.style.paddingLeft = inputLeft;\n            }\n            // Set the icon margin start\n            var /** @type {?} */ iconLeft = 'calc(50% - ' + ((textWidth / 2) + 30) + 'px)';\n            if (this._plt.isRTL) {\n                iconEle.style.marginRight = iconLeft;\n            }\n            else {\n                iconEle.style.marginLeft = iconLeft;\n            }\n        }\n    }\n    /**\n     * @hidden\n     * Show the iOS Cancel button on focus, hide it offscreen otherwise\n     * @return {?}\n     */\n    positionCancelButton() {\n        const /** @type {?} */ showShowCancel = this._isFocus;\n        if (showShowCancel !== this._isCancelVisible) {\n            var /** @type {?} */ cancelStyleEle = this._cancelButton.nativeElement;\n            var /** @type {?} */ cancelStyle = cancelStyleEle.style;\n            this._isCancelVisible = showShowCancel;\n            if (showShowCancel) {\n                if (this._plt.isRTL) {\n                    cancelStyle.marginLeft = '0';\n                }\n                else {\n                    cancelStyle.marginRight = '0';\n                }\n            }\n            else {\n                var /** @type {?} */ offset = cancelStyleEle.offsetWidth;\n                if (offset > 0) {\n                    if (this._plt.isRTL) {\n                        cancelStyle.marginLeft = -offset + 'px';\n                    }\n                    else {\n                        cancelStyle.marginRight = -offset + 'px';\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * @hidden\n     * Update the Searchbar input value when the input changes\n     * @param {?} ev\n     * @return {?}\n     */\n    inputChanged(ev) {\n        this.value = ev.target.value;\n        this._inputDebouncer.debounce(() => {\n            this.ionInput.emit(ev);\n        });\n    }\n    /**\n     * @hidden\n     * Sets the Searchbar to focused and active on input focus.\n     * @return {?}\n     */\n    inputFocused() {\n        this._isActive = true;\n        this._fireFocus();\n        this.positionElements();\n    }\n    /**\n     * @hidden\n     * Sets the Searchbar to not focused and checks if it should align left\n     * based on whether there is a value in the searchbar or not.\n     * @return {?}\n     */\n    inputBlurred() {\n        // _shouldBlur determines if it should blur\n        // if we are clearing the input we still want to stay focused in the input\n        if (this._shouldBlur === false) {\n            this._searchbarInput.nativeElement.focus();\n            this._shouldBlur = true;\n            return;\n        }\n        this._fireBlur();\n        this.positionElements();\n    }\n    /**\n     * @hidden\n     * Clears the input field and triggers the control change.\n     * @param {?} ev\n     * @return {?}\n     */\n    clearInput(ev) {\n        this.ionClear.emit(ev);\n        // setTimeout() fixes https://github.com/ionic-team/ionic/issues/7527\n        // wait for 4 frames\n        setTimeout(() => {\n            let /** @type {?} */ value = this._value;\n            if (isPresent(value) && value !== '') {\n                this.value = ''; // DOM WRITE\n                this.ionInput.emit(ev);\n            }\n        }, 16 * 4);\n        this._shouldBlur = false;\n    }\n    /**\n     * @hidden\n     * Clears the input field and tells the input to blur since\n     * the clearInput function doesn't want the input to blur\n     * then calls the custom cancel function if the user passed one in.\n     * @param {?} ev\n     * @return {?}\n     */\n    cancelSearchbar(ev) {\n        this.ionCancel.emit(ev);\n        this.clearInput(ev);\n        this._shouldBlur = true;\n        this._isActive = false;\n    }\n    /**\n     * @return {?}\n     */\n    setFocus() {\n        this._renderer.invokeElementMethod(this._searchbarInput.nativeElement, 'focus');\n    }\n}\nSearchbar.decorators = [\n    { type: Component, args: [{\n                selector: 'ion-searchbar',\n                template: '<div class=\"searchbar-input-container\">' +\n                    '<button ion-button mode=\"md\" (click)=\"cancelSearchbar($event)\" (mousedown)=\"cancelSearchbar($event)\" clear color=\"dark\" class=\"searchbar-md-cancel\" type=\"button\">' +\n                    '<ion-icon name=\"md-arrow-back\"></ion-icon>' +\n                    '</button>' +\n                    '<div #searchbarIcon class=\"searchbar-search-icon\"></div>' +\n                    '<input #searchbarInput class=\"searchbar-input\" (input)=\"inputChanged($event)\" (blur)=\"inputBlurred()\" (focus)=\"inputFocused()\" ' +\n                    '[attr.placeholder]=\"placeholder\" ' +\n                    '[attr.type]=\"type\" ' +\n                    '[attr.autocomplete]=\"_autocomplete\" ' +\n                    '[attr.autocorrect]=\"_autocorrect\" ' +\n                    '[attr.spellcheck]=\"_spellcheck\">' +\n                    '<button ion-button clear class=\"searchbar-clear-icon\" [mode]=\"_mode\" (click)=\"clearInput($event)\" (mousedown)=\"clearInput($event)\" type=\"button\"></button>' +\n                    '</div>' +\n                    '<button ion-button #cancelButton mode=\"ios\" [tabindex]=\"_isActive ? 1 : -1\" clear (click)=\"cancelSearchbar($event)\" (mousedown)=\"cancelSearchbar($event)\" class=\"searchbar-ios-cancel\" type=\"button\">{{cancelButtonText}}</button>',\n                host: {\n                    '[class.searchbar-animated]': '_animated',\n                    '[class.searchbar-has-value]': '_value',\n                    '[class.searchbar-active]': '_isActive',\n                    '[class.searchbar-show-cancel]': '_showCancelButton',\n                    '[class.searchbar-left-aligned]': '_shouldAlignLeft',\n                    '[class.searchbar-has-focus]': '_isFocus'\n                },\n                encapsulation: ViewEncapsulation.None\n            },] },\n];\n/**\n * @nocollapse\n */\nSearchbar.ctorParameters = () => [\n    { type: Config, },\n    { type: Platform, },\n    { type: ElementRef, },\n    { type: Renderer, },\n    { type: NgControl, decorators: [{ type: Optional },] },\n];\nSearchbar.propDecorators = {\n    'cancelButtonText': [{ type: Input },],\n    'showCancelButton': [{ type: Input },],\n    'debounce': [{ type: Input },],\n    'placeholder': [{ type: Input },],\n    'autocomplete': [{ type: Input },],\n    'autocorrect': [{ type: Input },],\n    'spellcheck': [{ type: Input },],\n    'type': [{ type: Input },],\n    'animated': [{ type: Input },],\n    'ionInput': [{ type: Output },],\n    'ionCancel': [{ type: Output },],\n    'ionClear': [{ type: Output },],\n    '_searchbarInput': [{ type: ViewChild, args: ['searchbarInput',] },],\n    '_searchbarIcon': [{ type: ViewChild, args: ['searchbarIcon',] },],\n    '_cancelButton': [{ type: ViewChild, args: ['cancelButton', { read: ElementRef },] },],\n};\nfunction Searchbar_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Searchbar.decorators;\n    /**\n     * @nocollapse\n     * @type {?}\n     */\n    Searchbar.ctorParameters;\n    /** @type {?} */\n    Searchbar.propDecorators;\n    /** @type {?} */\n    Searchbar.prototype._shouldBlur;\n    /** @type {?} */\n    Searchbar.prototype._shouldAlignLeft;\n    /** @type {?} */\n    Searchbar.prototype._isCancelVisible;\n    /** @type {?} */\n    Searchbar.prototype._spellcheck;\n    /** @type {?} */\n    Searchbar.prototype._autocomplete;\n    /** @type {?} */\n    Searchbar.prototype._autocorrect;\n    /** @type {?} */\n    Searchbar.prototype._isActive;\n    /** @type {?} */\n    Searchbar.prototype._showCancelButton;\n    /** @type {?} */\n    Searchbar.prototype._animated;\n    /** @type {?} */\n    Searchbar.prototype._inputDebouncer;\n    /**\n     * \\@input {string} Set the the cancel button text. Default: `\"Cancel\"`.\n     * @type {?}\n     */\n    Searchbar.prototype.cancelButtonText;\n    /**\n     * \\@input {string} Set the input's placeholder. Default `\"Search\"`.\n     * @type {?}\n     */\n    Searchbar.prototype.placeholder;\n    /**\n     * \\@input {string} Set the type of the input. Values: `\"text\"`, `\"password\"`, `\"email\"`, `\"number\"`, `\"search\"`, `\"tel\"`, `\"url\"`. Default `\"search\"`.\n     * @type {?}\n     */\n    Searchbar.prototype.type;\n    /**\n     * \\@output {event} Emitted when the Searchbar input has changed, including when it's cleared.\n     * @type {?}\n     */\n    Searchbar.prototype.ionInput;\n    /**\n     * \\@output {event} Emitted when the cancel button is clicked.\n     * @type {?}\n     */\n    Searchbar.prototype.ionCancel;\n    /**\n     * \\@output {event} Emitted when the clear input button is clicked.\n     * @type {?}\n     */\n    Searchbar.prototype.ionClear;\n    /** @type {?} */\n    Searchbar.prototype._searchbarInput;\n    /** @type {?} */\n    Searchbar.prototype._searchbarIcon;\n    /** @type {?} */\n    Searchbar.prototype._cancelButton;\n    /** @type {?} */\n    Searchbar.prototype._plt;\n}\n"]}