{"version":3,"file":"tab.js","sources":["tab.js"],"names":[],"mappingsoBAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { ChangeDetectorRef, Component, ComponentFactoryResolver, ElementRef, ErrorHandler, EventEmitter, Input, NgZone, Optional, Output, Renderer, ViewChild, ViewContainerRef, ViewEncapsulation } from '@angular/core';\nimport { App } from '../app/app';\nimport { Config } from '../../config/config';\nimport { DeepLinker } from '../../navigation/deep-linker';\nimport { DomController } from '../../platform/dom-controller';\nimport { GestureController } from '../../gestures/gesture-controller';\nimport { isTrueProperty } from '../../util/util';\nimport { NavControllerBase } from '../../navigation/nav-controller-base';\nimport { Platform } from '../../platform/platform';\nimport { Tabs } from './tabs';\nimport { TransitionController } from '../../transitions/transition-controller';\n/**\n * \\@name Tab\n * \\@description\n * The Tab component, written `<ion-tab>`, is styled based on the mode and should\n * be used in conjunction with the [Tabs](../Tabs/) component.\n *\n * Each `ion-tab` is a declarative component for a [NavController](../../../navigation/NavController/).\n * Basically, each tab is a `NavController`. For more information on using\n * navigation controllers take a look at the [NavController API Docs](../../../navigation/NavController/).\n *\n * See the [Tabs API Docs](../Tabs/) for more details on configuring Tabs.\n *\n * \\@usage\n *\n * To add a basic tab, you can use the following markup where the `root` property\n * is the page you want to load for that tab, `tabTitle` is the optional text to\n * display on the tab, and `tabIcon` is the optional [icon](../../icon/Icon/).\n *\n * ```html\n * <ion-tabs>\n *  <ion-tab [root]=\"chatRoot\" tabTitle=\"Chat\" tabIcon=\"chat\"></ion-tab>\n * </ion-tabs>\n * ```\n *\n * Then, in your class you can set `chatRoot` to an imported class:\n *\n * ```ts\n * import { ChatPage } from '../chat/chat';\n *\n * export class Tabs {\n *   // here we'll set the property of chatRoot to\n *   // the imported class of ChatPage\n *   chatRoot = ChatPage;\n *\n *   constructor() {\n *\n *   }\n * }\n * ```\n *\n * You can also pass some parameters to the root page of the tab through\n * `rootParams`. Below we pass `chatParams` to the Chat tab:\n *\n * ```html\n * <ion-tabs>\n *  <ion-tab [root]=\"chatRoot\" [rootParams]=\"chatParams\" tabTitle=\"Chat\" tabIcon=\"chat\"></ion-tab>\n * </ion-tabs>\n * ```\n *\n * ```ts\n * export class Tabs {\n *   chatRoot = ChatPage;\n *\n *   // set some user information on chatParams\n *   chatParams = {\n *     user1: 'admin',\n *     user2: 'ionic'\n *   };\n *\n *   constructor() {\n *\n *   }\n * }\n * ```\n *\n * And in `ChatPage` you can get the data from `NavParams`:\n *\n * ```ts\n * export class ChatPage {\n *   constructor(navParams: NavParams) {\n *     console.log('Passed params', navParams.data);\n *   }\n * }\n * ```\n *\n * Sometimes you may want to call a method instead of navigating to a new\n * page. You can use the `(ionSelect)` event to call a method on your class when\n * the tab is selected. Below is an example of presenting a modal from one of\n * the tabs.\n *\n * ```html\n * <ion-tabs>\n *   <ion-tab (ionSelect)=\"chat()\" tabTitle=\"Show Modal\"></ion-tab>\n * </ion-tabs>\n * ```\n *\n * ```ts\n * export class Tabs {\n *   constructor(public modalCtrl: ModalController) {\n *\n *   }\n *\n *   chat() {\n *     let modal = this.modalCtrl.create(ChatPage);\n *     modal.present();\n *   }\n * }\n * ```\n *\n *\n * \\@demo /docs/demos/src/tabs/\n * @see {\\@link /docs/components#tabs Tabs Component Docs}\n * @see {\\@link ../../tabs/Tabs Tabs API Docs}\n * @see {\\@link ../../nav/Nav Nav API Docs}\n * @see {\\@link ../../nav/NavController NavController API Docs}\n */\nexport class Tab extends NavControllerBase {\n    /**\n     * @param {?} parent\n     * @param {?} app\n     * @param {?} config\n     * @param {?} plt\n     * @param {?} elementRef\n     * @param {?} zone\n     * @param {?} renderer\n     * @param {?} cfr\n     * @param {?} _cd\n     * @param {?} gestureCtrl\n     * @param {?} transCtrl\n     * @param {?} linker\n     * @param {?} _dom\n     * @param {?} errHandler\n     */\n    constructor(parent, app, config, plt, elementRef, zone, renderer, cfr, _cd, gestureCtrl, transCtrl, linker, _dom, errHandler) {\n        // A Tab is a NavController for its child pages\n        super(parent, app, config, plt, elementRef, zone, renderer, cfr, gestureCtrl, transCtrl, linker, _dom, errHandler);\n        this._cd = _cd;\n        this.linker = linker;\n        this._dom = _dom;\n        /**\n         * @hidden\n         */\n        this._isEnabled = true;\n        /**\n         * @hidden\n         */\n        this._isShown = true;\n        /**\n         * \\@output {Tab} Emitted when the current tab is selected.\n         */\n        this.ionSelect = new EventEmitter();\n        this.id = parent.add(this);\n        this._tabsHideOnSubPages = config.getBoolean('tabsHideOnSubPages');\n        this._tabId = 'tabpanel-' + this.id;\n        this._btnId = 'tab-' + this.id;\n    }\n    /**\n     * \\@input {boolean} If true, enable the tab. If false,\n     * the user cannot interact with this element.\n     * Default: `true`.\n     * @return {?}\n     */\n    get enabled() {\n        return this._isEnabled;\n    }\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    set enabled(val) {\n        this._isEnabled = isTrueProperty(val);\n    }\n    /**\n     * \\@input {boolean} If true, the tab button is visible within the\n     * tabbar. Default: `true`.\n     * @return {?}\n     */\n    get show() {\n        return this._isShown;\n    }\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    set show(val) {\n        this._isShown = isTrueProperty(val);\n    }\n    /**\n     * \\@input {boolean} If true, hide the tabs on child pages.\n     * @return {?}\n     */\n    get tabsHideOnSubPages() {\n        return this._tabsHideOnSubPages;\n    }\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    set tabsHideOnSubPages(val) {\n        this._tabsHideOnSubPages = isTrueProperty(val);\n    }\n    /**\n     * @hidden\n     * @param {?} val\n     * @return {?}\n     */\n    set _vp(val) {\n        this.setViewport(val);\n    }\n    /**\n     * @hidden\n     * @return {?}\n     */\n    ngOnInit() {\n        this.tabBadgeStyle = this.tabBadgeStyle ? this.tabBadgeStyle : 'default';\n    }\n    /**\n     * @hidden\n     * @param {?} opts\n     * @param {?=} done\n     * @return {?}\n     */\n    load(opts, done) {\n        if (this._lazyRootFromUrl || (!this._loaded && this.root)) {\n            this.setElementClass('show-tab', true);\n            // okay, first thing we need to do if check if the view already exists\n            const /** @type {?} */ nameToUse = this._lazyRootFromUrl ? this._lazyRootFromUrl : this.root;\n            const /** @type {?} */ dataToUse = this._lazyRootFromUrlData ? this._lazyRootFromUrlData : this.rootParams;\n            const /** @type {?} */ numViews = this.length() - 1;\n            for (let /** @type {?} */ i = numViews; i >= 0; i--) {\n                const /** @type {?} */ viewController = this.getByIndex(i);\n                if (viewController && (viewController.id === nameToUse || viewController.component === nameToUse)) {\n                    if (i === numViews) {\n                        // this is the last view in the stack and it's the same\n                        // as the segment so there's no change needed\n                        return done();\n                    }\n                    else {\n                        // it's not the exact view as the end\n                        // let's have this nav go back to this exact view\n                        return this.popTo(viewController, {\n                            animate: false,\n                            updateUrl: false,\n                        }, done);\n                    }\n                }\n            }\n            this.push(nameToUse, dataToUse, opts, done);\n            this._lazyRootFromUrl = null;\n            this._lazyRootFromUrlData = null;\n            this._loaded = true;\n        }\n        else {\n            // if this is not the Tab's initial load then we need\n            // to refresh the tabbar and content dimensions to be sure\n            // they're lined up correctly\n            this._dom.read(() => {\n                this.resize();\n            });\n            return done();\n        }\n    }\n    /**\n     * @hidden\n     * @return {?}\n     */\n    resize() {\n        const /** @type {?} */ active = this.getActive();\n        if (!active) {\n            return;\n        }\n        const /** @type {?} */ content = active.getIONContent();\n        content && content.resize();\n    }\n    /**\n     * @hidden\n     * @param {?} viewCtrl\n     * @param {?} componentRef\n     * @param {?} viewport\n     * @return {?}\n     */\n    _viewAttachToDOM(viewCtrl, componentRef, viewport) {\n        const /** @type {?} */ isTabSubPage = (this._tabsHideOnSubPages && viewCtrl.index > 0);\n        if (isTabSubPage) {\n            viewport = this.parent.portal;\n        }\n        super._viewAttachToDOM(viewCtrl, componentRef, viewport);\n        if (isTabSubPage) {\n            // add the .tab-subpage css class to tabs pages that should act like subpages\n            const /** @type {?} */ pageEleRef = viewCtrl.pageRef();\n            if (pageEleRef) {\n                this._renderer.setElementClass(pageEleRef.nativeElement, 'tab-subpage', true);\n            }\n        }\n    }\n    /**\n     * @hidden\n     * @param {?} isSelected\n     * @return {?}\n     */\n    setSelected(isSelected) {\n        this.isSelected = isSelected;\n        this.setElementClass('show-tab', isSelected);\n        this.setElementAttribute('aria-hidden', (!isSelected).toString());\n        if (isSelected) {\n            // this is the selected tab, detect changes\n            this._cd.reattach();\n        }\n        else {\n            // this tab is not selected, do not detect changes\n            this._cd.detach();\n        }\n    }\n    /**\n     * @hidden\n     * @return {?}\n     */\n    get index() {\n        return this.parent.getIndex(this);\n    }\n    /**\n     * @hidden\n     * @param {?} component\n     * @param {?} data\n     * @return {?}\n     */\n    updateHref(component, data) {\n        if (this.btn && this.linker) {\n            let /** @type {?} */ href = this.linker.createUrl(this.parent, component, data) || '#';\n            this.btn.updateHref(href);\n        }\n    }\n    /**\n     * @hidden\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.destroy();\n    }\n    /**\n     * @hidden\n     * @return {?}\n     */\n    getType() {\n        return 'tab';\n    }\n    /**\n     * @param {?} opts\n     * @return {?}\n     */\n    goToRoot(opts) {\n        return this.setRoot(this.root, this.rootParams, opts, null);\n    }\n}\nTab.decorators = [\n    { type: Component, args: [{\n                selector: 'ion-tab',\n                template: '<div #viewport></div><div class=\"nav-decor\"></div>',\n                host: {\n                    '[attr.id]': '_tabId',\n                    '[attr.aria-labelledby]': '_btnId',\n                    'role': 'tabpanel'\n                },\n                encapsulation: ViewEncapsulation.None,\n            },] },\n];\n/**\n * @nocollapse\n */\nTab.ctorParameters = () => [\n    { type: Tabs, },\n    { type: App, },\n    { type: Config, },\n    { type: Platform, },\n    { type: ElementRef, },\n    { type: NgZone, },\n    { type: Renderer, },\n    { type: ComponentFactoryResolver, },\n    { type: ChangeDetectorRef, },\n    { type: GestureController, },\n    { type: TransitionController, },\n    { type: DeepLinker, decorators: [{ type: Optional },] },\n    { type: DomController, },\n    { type: ErrorHandler, },\n];\nTab.propDecorators = {\n    'root': [{ type: Input },],\n    'rootParams': [{ type: Input },],\n    'tabUrlPath': [{ type: Input },],\n    'tabTitle': [{ type: Input },],\n    'tabIcon': [{ type: Input },],\n    'tabBadge': [{ type: Input },],\n    'tabBadgeStyle': [{ type: Input },],\n    'enabled': [{ type: Input },],\n    'show': [{ type: Input },],\n    'tabsHideOnSubPages': [{ type: Input },],\n    'ionSelect': [{ type: Output },],\n    '_vp': [{ type: ViewChild, args: ['viewport', { read: ViewContainerRef },] },],\n};\nfunction Tab_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Tab.decorators;\n    /**\n     * @nocollapse\n     * @type {?}\n     */\n    Tab.ctorParameters;\n    /** @type {?} */\n    Tab.propDecorators;\n    /**\n     * @hidden\n     * @type {?}\n     */\n    Tab.prototype._isInitial;\n    /**\n     * @hidden\n     * @type {?}\n     */\n    Tab.prototype._isEnabled;\n    /**\n     * @hidden\n     * @type {?}\n     */\n    Tab.prototype._isShown;\n    /**\n     * @hidden\n     * @type {?}\n     */\n    Tab.prototype._tabId;\n    /**\n     * @hidden\n     * @type {?}\n     */\n    Tab.prototype._btnId;\n    /**\n     * @hidden\n     * @type {?}\n     */\n    Tab.prototype._loaded;\n    /**\n     * @hidden\n     * @type {?}\n     */\n    Tab.prototype.isSelected;\n    /**\n     * @hidden\n     * @type {?}\n     */\n    Tab.prototype.btn;\n    /**\n     * @hidden\n     * @type {?}\n     */\n    Tab.prototype._tabsHideOnSubPages;\n    /**\n     * @hidden\n     * @type {?}\n     */\n    Tab.prototype._lazyRootFromUrl;\n    /**\n     * @hidden\n     * @type {?}\n     */\n    Tab.prototype._lazyRootFromUrlData;\n    /**\n     * \\@input {Page} Set the root page for this tab.\n     * @type {?}\n     */\n    Tab.prototype.root;\n    /**\n     * \\@input {object} Any nav-params to pass to the root page of this tab.\n     * @type {?}\n     */\n    Tab.prototype.rootParams;\n    /**\n     * \\@input {string} The URL path name to represent this tab within the URL.\n     * @type {?}\n     */\n    Tab.prototype.tabUrlPath;\n    /**\n     * \\@input {string} The title of the tab button.\n     * @type {?}\n     */\n    Tab.prototype.tabTitle;\n    /**\n     * \\@input {string} The icon for the tab button.\n     * @type {?}\n     */\n    Tab.prototype.tabIcon;\n    /**\n     * \\@input {string} The badge for the tab button.\n     * @type {?}\n     */\n    Tab.prototype.tabBadge;\n    /**\n     * \\@input {string} The badge color for the tab button.\n     * @type {?}\n     */\n    Tab.prototype.tabBadgeStyle;\n    /**\n     * \\@output {Tab} Emitted when the current tab is selected.\n     * @type {?}\n     */\n    Tab.prototype.ionSelect;\n    /** @type {?} */\n    Tab.prototype._cd;\n    /** @type {?} */\n    Tab.prototype.linker;\n    /** @type {?} */\n    Tab.prototype._dom;\n}\n"]}