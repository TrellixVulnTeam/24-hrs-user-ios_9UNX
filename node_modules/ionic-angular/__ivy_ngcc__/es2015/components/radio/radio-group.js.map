{"version":3,"file":"radio-group.js","sources":["radio-group.js"],"names":[],"mappingsoOASE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;oBAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { ChangeDetectorRef, ContentChild, Directive, ElementRef, EventEmitter, Input, Output, Renderer } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { ListHeader } from '../list/list-header';\nimport { isCheckedProperty, isTrueProperty } from '../../util/util';\n/**\n * \\@name RadioGroup\n * \\@description\n * A radio group is a group of [radio buttons](../RadioButton). It allows\n * a user to select at most one radio button from a set. Checking one radio\n * button that belongs to a radio group unchecks any previous checked\n * radio button within the same group.\n *\n * See the [Angular Forms Docs](https://angular.io/docs/ts/latest/guide/forms.html)\n * for more information on forms and inputs.\n *\n * \\@usage\n * ```html\n * <ion-list radio-group [(ngModel)]=\"autoManufacturers\">\n *\n *   <ion-list-header>\n *     Auto Manufacturers\n *   </ion-list-header>\n *\n *   <ion-item>\n *     <ion-label>Cord</ion-label>\n *     <ion-radio value=\"cord\"></ion-radio>\n *   </ion-item>\n *\n *   <ion-item>\n *     <ion-label>Duesenberg</ion-label>\n *     <ion-radio value=\"duesenberg\"></ion-radio>\n *   </ion-item>\n *\n *   <ion-item>\n *     <ion-label>Hudson</ion-label>\n *     <ion-radio value=\"hudson\"></ion-radio>\n *   </ion-item>\n *\n *   <ion-item>\n *     <ion-label>Packard</ion-label>\n *     <ion-radio value=\"packard\"></ion-radio>\n *   </ion-item>\n *\n *   <ion-item>\n *     <ion-label>Studebaker</ion-label>\n *     <ion-radio value=\"studebaker\"></ion-radio>\n *   </ion-item>\n *\n * </ion-list>\n * ```\n *\n * \\@demo /docs/demos/src/radio/\n * @see {\\@link /docs/components#radio Radio Component Docs}\n * @see {\\@link ../RadioButton RadioButton API Docs}\n */\nexport class RadioGroup {\n    /**\n     * @param {?} _renderer\n     * @param {?} _elementRef\n     * @param {?} _cd\n     */\n    constructor(_renderer, _elementRef, _cd) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        this._cd = _cd;\n        /**\n         * \\@internal\n         */\n        this._disabled = false;\n        /**\n         * @hidden\n         */\n        this._btns = [];\n        /**\n         * @hidden\n         */\n        this._ids = -1;\n        /**\n         * @hidden\n         */\n        this._init = false;\n        /**\n         * \\@output {any} Emitted when the selected button has changed.\n         */\n        this.ionChange = new EventEmitter();\n        this.id = ++radioGroupIds;\n    }\n    /**\n     * \\@input {boolean} If true, the user cannot interact with any of the buttons in the group.\n     * @return {?}\n     */\n    get disabled() {\n        return this._disabled;\n    }\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    set disabled(val) {\n        this._disabled = isTrueProperty(val);\n    }\n    /**\n     * @hidden\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        let /** @type {?} */ activeButton = this._btns.find(b => b.checked);\n        if (activeButton) {\n            this._setActive(activeButton);\n        }\n    }\n    /**\n     * @hidden\n     * @param {?} val\n     * @return {?}\n     */\n    writeValue(val) {\n        (void 0) /* console.debug */;\n        this.value = val;\n        if (this._init) {\n            this._update();\n            this.onTouched();\n            this.ionChange.emit(val);\n        }\n        this._init = true;\n    }\n    /**\n     * @hidden\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this._fn = fn;\n        this.onChange = (val) => {\n            // onChange used when there's an formControlName\n            (void 0) /* console.debug */;\n            fn(val);\n            this.value = val;\n            this._update();\n            this.onTouched();\n            this.ionChange.emit(val);\n        };\n    }\n    /**\n     * @hidden\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnTouched(fn) { this.onTouched = fn; }\n    /**\n     * @hidden\n     * @return {?}\n     */\n    _update() {\n        // loop through each of the radiobuttons\n        let /** @type {?} */ hasChecked = false;\n        this._btns.forEach(radioButton => {\n            // check this radiobutton if its value is\n            // the same as the radiogroups value\n            radioButton.checked = isCheckedProperty(this.value, radioButton.value) && !hasChecked;\n            if (radioButton.checked) {\n                // if this button is checked, then set it as\n                // the radiogroup's active descendant\n                this._setActive(radioButton);\n                hasChecked = true;\n            }\n        });\n    }\n    /**\n     * @hidden\n     * @param {?} radioButton\n     * @return {?}\n     */\n    _setActive(radioButton) {\n        this._renderer.setElementAttribute(this._elementRef.nativeElement, 'aria-activedescendant', radioButton.id);\n    }\n    /**\n     * @hidden\n     * @param {?} button\n     * @return {?}\n     */\n    add(button) {\n        this._btns.push(button);\n        // listen for radiobutton select events\n        button.ionSelect.subscribe((val) => {\n            // this radiobutton has been selected\n            this.onChange(val);\n        });\n        return this.id + '-' + (++this._ids);\n    }\n    /**\n     * @hidden\n     * @param {?} button\n     * @return {?}\n     */\n    remove(button) {\n        let /** @type {?} */ index = this._btns.indexOf(button);\n        if (index > -1) {\n            if (button.value === this.value) {\n                this.value = null;\n            }\n            this._btns.splice(index, 1);\n        }\n    }\n    /**\n     * @hidden\n     * @param {?} header\n     * @return {?}\n     */\n    set _header(header) {\n        if (header) {\n            if (!header.id) {\n                header.id = 'rg-hdr-' + this.id;\n            }\n            this._renderer.setElementAttribute(this._elementRef.nativeElement, 'aria-describedby', header.id);\n        }\n    }\n    /**\n     * @hidden\n     * @param {?} val\n     * @return {?}\n     */\n    onChange(val) {\n        // onChange used when there is not an formControlName\n        (void 0) /* console.debug */;\n        this.value = val;\n        this._update();\n        this.onTouched();\n        this.ionChange.emit(val);\n        this._cd.detectChanges();\n    }\n    /**\n     * @hidden\n     * @return {?}\n     */\n    onTouched() { }\n    /**\n     * @hidden\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n    }\n}\nRadioGroup.decorators = [\n    { type: Directive, args: [{\n                selector: '[radio-group]',\n                host: {\n                    'role': 'radiogroup'\n                },\n                providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: RadioGroup, multi: true }],\n            },] },\n];\n/**\n * @nocollapse\n */\nRadioGroup.ctorParameters = () => [\n    { type: Renderer, },\n    { type: ElementRef, },\n    { type: ChangeDetectorRef, },\n];\nRadioGroup.propDecorators = {\n    'disabled': [{ type: Input },],\n    'ionChange': [{ type: Output },],\n    '_header': [{ type: ContentChild, args: [ListHeader,] },],\n};\nfunction RadioGroup_tsickle_Closure_declarations() {\n    /** @type {?} */\n    RadioGroup.decorators;\n    /**\n     * @nocollapse\n     * @type {?}\n     */\n    RadioGroup.ctorParameters;\n    /** @type {?} */\n    RadioGroup.propDecorators;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    RadioGroup.prototype._disabled;\n    /**\n     * @hidden\n     * @type {?}\n     */\n    RadioGroup.prototype._btns;\n    /**\n     * @hidden\n     * @type {?}\n     */\n    RadioGroup.prototype._fn;\n    /**\n     * @hidden\n     * @type {?}\n     */\n    RadioGroup.prototype._ids;\n    /**\n     * @hidden\n     * @type {?}\n     */\n    RadioGroup.prototype._init;\n    /**\n     * @hidden\n     * @type {?}\n     */\n    RadioGroup.prototype.value;\n    /**\n     * @hidden\n     * @type {?}\n     */\n    RadioGroup.prototype.id;\n    /**\n     * \\@output {any} Emitted when the selected button has changed.\n     * @type {?}\n     */\n    RadioGroup.prototype.ionChange;\n    /** @type {?} */\n    RadioGroup.prototype._renderer;\n    /** @type {?} */\n    RadioGroup.prototype._elementRef;\n    /** @type {?} */\n    RadioGroup.prototype._cd;\n}\nlet /** @type {?} */ radioGroupIds = -1;\n"]}