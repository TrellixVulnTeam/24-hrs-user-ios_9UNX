{"version":3,"file":"transition-controller.js","sources":["transition-controller.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;0IAGE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;kGAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Config } from '../config/config';\nimport { isPresent } from '../util/util';\nimport { Platform } from '../platform/platform';\n/**\n * @hidden\n */\nexport class TransitionController {\n    /**\n     * @param {?} plt\n     * @param {?} _config\n     */\n    constructor(plt, _config) {\n        this.plt = plt;\n        this._config = _config;\n        this._ids = 0;\n        this._trns = {};\n    }\n    /**\n     * @param {?} nav\n     * @return {?}\n     */\n    getRootTrnsId(nav) {\n        nav = (nav.parent);\n        while (nav) {\n            if (isPresent(nav._trnsId)) {\n                return nav._trnsId;\n            }\n            nav = nav.parent;\n        }\n        return null;\n    }\n    /**\n     * @return {?}\n     */\n    nextId() {\n        return this._ids++;\n    }\n    /**\n     * @param {?} trnsId\n     * @param {?} enteringView\n     * @param {?} leavingView\n     * @param {?} opts\n     * @return {?}\n     */\n    get(trnsId, enteringView, leavingView, opts) {\n        let /** @type {?} */ TransitionClass = this._config.getTransition(opts.animation);\n        if (!TransitionClass) {\n            // didn't find a transition animation, default to ios-transition\n            TransitionClass = this._config.getTransition('ios-transition');\n        }\n        const /** @type {?} */ trns = new TransitionClass(this.plt, enteringView, leavingView, opts);\n        trns.trnsId = trnsId;\n        if (!this._trns[trnsId]) {\n            // we haven't created the root transition yet\n            this._trns[trnsId] = trns;\n        }\n        else {\n            // we already have a root transition created\n            // add this new transition as a child to the root\n            this._trns[trnsId].add(trns);\n        }\n        return trns;\n    }\n    /**\n     * @param {?} trnsId\n     * @return {?}\n     */\n    destroy(trnsId) {\n        const /** @type {?} */ trans = this._trns[trnsId];\n        if (trans) {\n            trans.destroy();\n            delete this._trns[trnsId];\n        }\n    }\n}\nTransitionController.decorators = [\n    { type: Injectable },\n];\n/**\n * @nocollapse\n */\nTransitionController.ctorParameters = () => [\n    { type: Platform, },\n    { type: Config, },\n];\nfunction TransitionController_tsickle_Closure_declarations() {\n    /** @type {?} */\n    TransitionController.decorators;\n    /**\n     * @nocollapse\n     * @type {?}\n     */\n    TransitionController.ctorParameters;\n    /** @type {?} */\n    TransitionController.prototype._ids;\n    /** @type {?} */\n    TransitionController.prototype._trns;\n    /** @type {?} */\n    TransitionController.prototype.plt;\n    /** @type {?} */\n    TransitionController.prototype._config;\n}\n"]}