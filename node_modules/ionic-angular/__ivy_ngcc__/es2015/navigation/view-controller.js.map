{"version":3,"file":"view-controller.js","sources":["view-controller.js"],"names":[],"mappingssourcesContent":["import { EventEmitter, Output } from '@angular/core';\nimport { isPresent } from '../util/util';\nimport { STATE_DESTROYED, STATE_NEW } from './nav-util';\nimport { NavParams } from './nav-params';\n/**\n * \\@name ViewController\n * \\@description\n * Access various features and information about the current view.\n * \\@usage\n *  ```ts\n * import { Component } from '\\@angular/core';\n * import { ViewController } from 'ionic-angular';\n *\n * \\@Component({...})\n * export class MyPage{\n *\n *   constructor(public viewCtrl: ViewController) {}\n *\n * }\n * ```\n */\nexport class ViewController {\n    /**\n     * @param {?=} component\n     * @param {?=} data\n     * @param {?=} rootCssClass\n     */\n    constructor(component, data, rootCssClass = DEFAULT_CSS_CLASS) {\n        this.component = component;\n        this._isHidden = false;\n        this._state = STATE_NEW;\n        /**\n         * Observable to be subscribed to when the current component will become active\n         */\n        this.willEnter = new EventEmitter();\n        /**\n         * Observable to be subscribed to when the current component has become active\n         */\n        this.didEnter = new EventEmitter();\n        /**\n         * Observable to be subscribed to when the current component will no longer be active\n         */\n        this.willLeave = new EventEmitter();\n        /**\n         * Observable to be subscribed to when the current component is no long active\n         */\n        this.didLeave = new EventEmitter();\n        /**\n         * Observable to be subscribed to when the current component has been destroyed\n         */\n        this.willUnload = new EventEmitter();\n        /**\n         * @hidden\n         */\n        this.readReady = new EventEmitter();\n        /**\n         * @hidden\n         */\n        this.writeReady = new EventEmitter();\n        /**\n         * @hidden\n         */\n        this.isOverlay = false;\n        /**\n         * @hidden\n         */\n        this._emitter = new EventEmitter();\n        // passed in data could be NavParams, but all we care about is its data object\n        this.data = (data instanceof NavParams ? data.data : (isPresent(data) ? data : {}));\n        this._cssClass = rootCssClass;\n        this._ts = Date.now();\n    }\n    /**\n     * @hidden\n     * @param {?} componentRef\n     * @return {?}\n     */\n    init(componentRef) {\n        (void 0) /* assert */;\n        this._ts = Date.now();\n        this._cmp = componentRef;\n        this.instance = this.instance || componentRef.instance;\n        this._detached = false;\n    }\n    /**\n     * @param {?} navCtrl\n     * @return {?}\n     */\n    _setNav(navCtrl) {\n        this._nav = navCtrl;\n    }\n    /**\n     * @param {?} instance\n     * @return {?}\n     */\n    _setInstance(instance) {\n        this.instance = instance;\n    }\n    /**\n     * @hidden\n     * @param {?=} generatorOrNext\n     * @return {?}\n     */\n    subscribe(generatorOrNext) {\n        return this._emitter.subscribe(generatorOrNext);\n    }\n    /**\n     * @hidden\n     * @param {?=} data\n     * @return {?}\n     */\n    emit(data) {\n        this._emitter.emit(data);\n    }\n    /**\n     * Called when the current viewController has be successfully dismissed\n     * @param {?} callback\n     * @return {?}\n     */\n    onDidDismiss(callback) {\n        this._onDidDismiss = callback;\n    }\n    /**\n     * Called when the current viewController will be dismissed\n     * @param {?} callback\n     * @return {?}\n     */\n    onWillDismiss(callback) {\n        this._onWillDismiss = callback;\n    }\n    /**\n     * Dismiss the current viewController\n     * @param {?=} data\n     * @param {?=} role\n     * @param {?=} navOptions\n     * @return {?}\n     */\n    dismiss(data, role, navOptions = {}) {\n        if (!this._nav) {\n            (void 0) /* assert */;\n            return Promise.resolve(false);\n        }\n        if (this.isOverlay && !navOptions.minClickBlockDuration) {\n            // This is a Modal being dismissed so we need\n            // to add the minClickBlockDuration option\n            // for UIWebView\n            navOptions.minClickBlockDuration = 400;\n        }\n        this._dismissData = data;\n        this._dismissRole = role;\n        const /** @type {?} */ options = Object.assign({}, this._leavingOpts, navOptions);\n        return this._nav.removeView(this, options).then(() => data);\n    }\n    /**\n     * @hidden\n     * @return {?}\n     */\n    getNav() {\n        return this._nav;\n    }\n    /**\n     * @hidden\n     * @param {?} _direction\n     * @return {?}\n     */\n    getTransitionName(_direction) {\n        return this._nav && this._nav.config.get('pageTransition');\n    }\n    /**\n     * @hidden\n     * @return {?}\n     */\n    getNavParams() {\n        return new NavParams(this.data);\n    }\n    /**\n     * @hidden\n     * @param {?} opts\n     * @return {?}\n     */\n    setLeavingOpts(opts) {\n        this._leavingOpts = opts;\n    }\n    /**\n     * Check to see if you can go back in the navigation stack.\n     * @return {?}\n     */\n    enableBack() {\n        // update if it's possible to go back from this nav item\n        if (!this._nav) {\n            return false;\n        }\n        // the previous view may exist, but if it's about to be destroyed\n        // it shouldn't be able to go back to\n        const /** @type {?} */ previousItem = this._nav.getPrevious(this);\n        return !!(previousItem);\n    }\n    /**\n     * @hidden\n     * @return {?}\n     */\n    get name() {\n        return (this.component ? this.component.name : '');\n    }\n    /**\n     * Get the index of the current component in the current navigation stack.\n     * @return {?}\n     */\n    get index() {\n        return (this._nav ? this._nav.indexOf(this) : -1);\n    }\n    /**\n     * @return {?}\n     */\n    isFirst() {\n        return (this._nav ? this._nav.first() === this : false);\n    }\n    /**\n     * @return {?}\n     */\n    isLast() {\n        return (this._nav ? this._nav.last() === this : false);\n    }\n    /**\n     * @hidden\n     * DOM WRITE\n     * @param {?} shouldShow\n     * @param {?} renderer\n     * @return {?}\n     */\n    _domShow(shouldShow, renderer) {\n        // using hidden element attribute to display:none and not render views\n        // _hidden value of '' means the hidden attribute will be added\n        // _hidden value of null means the hidden attribute will be removed\n        // doing checks to make sure we only update the DOM when actually needed\n        // if it should render, then the hidden attribute should not be on the element\n        if (this._cmp && shouldShow === this._isHidden) {\n            this._isHidden = !shouldShow;\n            let /** @type {?} */ value = (shouldShow ? null : '');\n            // ******** DOM WRITE ****************\n            renderer.setElementAttribute(this.pageRef().nativeElement, 'hidden', value);\n        }\n    }\n    /**\n     * @hidden\n     * @return {?}\n     */\n    getZIndex() {\n        return this._zIndex;\n    }\n    /**\n     * @hidden\n     * DOM WRITE\n     * @param {?} zIndex\n     * @param {?} renderer\n     * @return {?}\n     */\n    _setZIndex(zIndex, renderer) {\n        if (zIndex !== this._zIndex) {\n            this._zIndex = zIndex;\n            const /** @type {?} */ pageRef = this.pageRef();\n            if (pageRef) {\n                // ******** DOM WRITE ****************\n                renderer.setElementStyle(pageRef.nativeElement, 'z-index', ((zIndex)));\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    pageRef() {\n        return this._cmp && this._cmp.location;\n    }\n    /**\n     * @param {?} directive\n     * @return {?}\n     */\n    _setContent(directive) {\n        this._cntDir = directive;\n    }\n    /**\n     * @return {?}\n     */\n    getContent() {\n        return this._cntDir;\n    }\n    /**\n     * @param {?} elementRef\n     * @return {?}\n     */\n    _setContentRef(elementRef) {\n        this._cntRef = elementRef;\n    }\n    /**\n     * @return {?}\n     */\n    contentRef() {\n        return this._cntRef;\n    }\n    /**\n     * @param {?} content\n     * @return {?}\n     */\n    _setIONContent(content) {\n        this._setContent(content);\n        this._ionCntDir = content;\n    }\n    /**\n     * @hidden\n     * @return {?}\n     */\n    getIONContent() {\n        return this._ionCntDir;\n    }\n    /**\n     * @param {?} elementRef\n     * @return {?}\n     */\n    _setIONContentRef(elementRef) {\n        this._setContentRef(elementRef);\n        this._ionCntRef = elementRef;\n    }\n    /**\n     * @hidden\n     * @return {?}\n     */\n    getIONContentRef() {\n        return this._ionCntRef;\n    }\n    /**\n     * @param {?} directive\n     * @return {?}\n     */\n    _setHeader(directive) {\n        this._hdrDir = directive;\n    }\n    /**\n     * @hidden\n     * @return {?}\n     */\n    getHeader() {\n        return this._hdrDir;\n    }\n    /**\n     * @param {?} directive\n     * @return {?}\n     */\n    _setFooter(directive) {\n        this._ftrDir = directive;\n    }\n    /**\n     * @hidden\n     * @return {?}\n     */\n    getFooter() {\n        return this._ftrDir;\n    }\n    /**\n     * @param {?} directive\n     * @return {?}\n     */\n    _setNavbar(directive) {\n        this._nb = directive;\n    }\n    /**\n     * @hidden\n     * @return {?}\n     */\n    getNavbar() {\n        return this._nb;\n    }\n    /**\n     * Find out if the current component has a NavBar or not. Be sure\n     * to wrap this in an `ionViewWillEnter` method in order to make sure\n     * the view has rendered fully.\n     * @return {?}\n     */\n    hasNavbar() {\n        return !!this._nb;\n    }\n    /**\n     * Change the title of the back-button. Be sure to call this\n     * after `ionViewWillEnter` to make sure the  DOM has been rendered.\n     * @param {?} val\n     * @return {?}\n     */\n    setBackButtonText(val) {\n        this._nb && this._nb.setBackButtonText(val);\n    }\n    /**\n     * Set if the back button for the current view is visible or not. Be sure to call this\n     * after `ionViewWillEnter` to make sure the  DOM has been rendered.\n     * @param {?} shouldShow\n     * @return {?}\n     */\n    showBackButton(shouldShow) {\n        if (this._nb) {\n            this._nb.hideBackButton = !shouldShow;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _preLoad() {\n        (void 0) /* assert */;\n        this._lifecycle('PreLoad');\n    }\n    /**\n     * @hidden\n     * The view has loaded. This event only happens once per view will be created.\n     * This event is fired before the component and his children have been initialized.\n     * @return {?}\n     */\n    _willLoad() {\n        (void 0) /* assert */;\n        this._lifecycle('WillLoad');\n    }\n    /**\n     * @hidden\n     * The view has loaded. This event only happens once per view being\n     * created. If a view leaves but is cached, then this will not\n     * fire again on a subsequent viewing. This method is a good place\n     * to put your setup code for the view; however, it is not the\n     * recommended method to use when a view becomes active.\n     * @return {?}\n     */\n    _didLoad() {\n        (void 0) /* assert */;\n        this._lifecycle('DidLoad');\n    }\n    /**\n     * @hidden\n     * The view is about to enter and become the active view.\n     * @return {?}\n     */\n    _willEnter() {\n        (void 0) /* assert */;\n        if (this._detached && this._cmp) {\n            // ensure this has been re-attached to the change detector\n            this._cmp.changeDetectorRef.reattach();\n            this._detached = false;\n        }\n        this.willEnter.emit(null);\n        this._lifecycle('WillEnter');\n    }\n    /**\n     * @hidden\n     * The view has fully entered and is now the active view. This\n     * will fire, whether it was the first load or loaded from the cache.\n     * @return {?}\n     */\n    _didEnter() {\n        (void 0) /* assert */;\n        this._nb && this._nb.didEnter();\n        this.didEnter.emit(null);\n        this._lifecycle('DidEnter');\n    }\n    /**\n     * @hidden\n     * The view is about to leave and no longer be the active view.\n     * @param {?} willUnload\n     * @return {?}\n     */\n    _willLeave(willUnload) {\n        this.willLeave.emit(null);\n        this._lifecycle('WillLeave');\n        if (willUnload && this._onWillDismiss) {\n            this._onWillDismiss(this._dismissData, this._dismissRole);\n            this._onWillDismiss = null;\n        }\n    }\n    /**\n     * @hidden\n     * The view has finished leaving and is no longer the active view. This\n     * will fire, whether it is cached or unloaded.\n     * @return {?}\n     */\n    _didLeave() {\n        this.didLeave.emit(null);\n        this._lifecycle('DidLeave');\n        // when this is not the active page\n        // we no longer need to detect changes\n        if (!this._detached && this._cmp) {\n            this._cmp.changeDetectorRef.detach();\n            this._detached = true;\n        }\n    }\n    /**\n     * @hidden\n     * @return {?}\n     */\n    _willUnload() {\n        this.willUnload.emit(null);\n        this._lifecycle('WillUnload');\n        this._onDidDismiss && this._onDidDismiss(this._dismissData, this._dismissRole);\n        this._onDidDismiss = null;\n        this._dismissData = null;\n        this._dismissRole = null;\n    }\n    /**\n     * @hidden\n     * DOM WRITE\n     * @param {?} renderer\n     * @return {?}\n     */\n    _destroy(renderer) {\n        (void 0) /* assert */;\n        if (this._cmp) {\n            if (renderer) {\n                // ensure the element is cleaned up for when the view pool reuses this element\n                // ******** DOM WRITE ****************\n                var /** @type {?} */ cmpEle = this._cmp.location.nativeElement;\n                renderer.setElementAttribute(cmpEle, 'class', null);\n                renderer.setElementAttribute(cmpEle, 'style', null);\n            }\n            // completely destroy this component. boom.\n            this._cmp.destroy();\n        }\n        this._nav = this._cmp = this.instance = this._cntDir = this._cntRef = this._leavingOpts = this._hdrDir = this._ftrDir = this._nb = this._onDidDismiss = this._onWillDismiss = null;\n        this._state = STATE_DESTROYED;\n    }\n    /**\n     * @hidden\n     * @param {?} lifecycle\n     * @return {?}\n     */\n    _lifecycleTest(lifecycle) {\n        const /** @type {?} */ instance = this.instance;\n        const /** @type {?} */ methodName = 'ionViewCan' + lifecycle;\n        if (instance && instance[methodName]) {\n            try {\n                var /** @type {?} */ result = instance[methodName]();\n                if (result instanceof Promise) {\n                    return result;\n                }\n                else {\n                    // Any value but explitic false, should be true\n                    return Promise.resolve(result !== false);\n                }\n            }\n            catch (e) {\n                return Promise.reject(`${this.name} ${methodName} error: ${e.message}`);\n            }\n        }\n        return Promise.resolve(true);\n    }\n    /**\n     * @hidden\n     * @param {?} lifecycle\n     * @return {?}\n     */\n    _lifecycle(lifecycle) {\n        const /** @type {?} */ instance = this.instance;\n        const /** @type {?} */ methodName = 'ionView' + lifecycle;\n        if (instance && instance[methodName]) {\n            instance[methodName]();\n        }\n    }\n}\nViewController.propDecorators = {\n    '_emitter': [{ type: Output },],\n};\nfunction ViewController_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ViewController.propDecorators;\n    /** @type {?} */\n    ViewController.prototype._cntDir;\n    /** @type {?} */\n    ViewController.prototype._cntRef;\n    /** @type {?} */\n    ViewController.prototype._ionCntDir;\n    /** @type {?} */\n    ViewController.prototype._ionCntRef;\n    /** @type {?} */\n    ViewController.prototype._hdrDir;\n    /** @type {?} */\n    ViewController.prototype._ftrDir;\n    /** @type {?} */\n    ViewController.prototype._isHidden;\n    /** @type {?} */\n    ViewController.prototype._leavingOpts;\n    /** @type {?} */\n    ViewController.prototype._nb;\n    /** @type {?} */\n    ViewController.prototype._onDidDismiss;\n    /** @type {?} */\n    ViewController.prototype._onWillDismiss;\n    /** @type {?} */\n    ViewController.prototype._dismissData;\n    /** @type {?} */\n    ViewController.prototype._dismissRole;\n    /** @type {?} */\n    ViewController.prototype._detached;\n    /** @type {?} */\n    ViewController.prototype._cmp;\n    /** @type {?} */\n    ViewController.prototype._nav;\n    /** @type {?} */\n    ViewController.prototype._zIndex;\n    /** @type {?} */\n    ViewController.prototype._state;\n    /** @type {?} */\n    ViewController.prototype._cssClass;\n    /** @type {?} */\n    ViewController.prototype._ts;\n    /**\n     * Observable to be subscribed to when the current component will become active\n     * @type {?}\n     */\n    ViewController.prototype.willEnter;\n    /**\n     * Observable to be subscribed to when the current component has become active\n     * @type {?}\n     */\n    ViewController.prototype.didEnter;\n    /**\n     * Observable to be subscribed to when the current component will no longer be active\n     * @type {?}\n     */\n    ViewController.prototype.willLeave;\n    /**\n     * Observable to be subscribed to when the current component is no long active\n     * @type {?}\n     */\n    ViewController.prototype.didLeave;\n    /**\n     * Observable to be subscribed to when the current component has been destroyed\n     * @type {?}\n     */\n    ViewController.prototype.willUnload;\n    /**\n     * @hidden\n     * @type {?}\n     */\n    ViewController.prototype.readReady;\n    /**\n     * @hidden\n     * @type {?}\n     */\n    ViewController.prototype.writeReady;\n    /**\n     * @hidden\n     * @type {?}\n     */\n    ViewController.prototype.data;\n    /**\n     * @hidden\n     * @type {?}\n     */\n    ViewController.prototype.instance;\n    /**\n     * @hidden\n     * @type {?}\n     */\n    ViewController.prototype.id;\n    /**\n     * @hidden\n     * @type {?}\n     */\n    ViewController.prototype.isOverlay;\n    /**\n     * @hidden\n     * @type {?}\n     */\n    ViewController.prototype._emitter;\n    /** @type {?} */\n    ViewController.prototype.component;\n}\n/**\n * @param {?} viewCtrl\n * @return {?}\n */\nexport function isViewController(viewCtrl) {\n    return !!(viewCtrl && ((viewCtrl))._didLoad && ((viewCtrl))._willUnload);\n}\nconst /** @type {?} */ DEFAULT_CSS_CLASS = 'ion-page';\n"]}